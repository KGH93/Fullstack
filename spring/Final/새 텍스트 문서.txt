디테일폼


<!-- detail.html 내 리뷰/QnA 탭 삽입 영역 -->
<div class="mt-5">
    <!-- 탭 메뉴 -->
    <div class="tab-menu d-flex mb-3 border-bottom">
        <button class="btn btn-link me-3 tab-button active" data-target="review-section">리뷰</button>
        <button class="btn btn-link tab-button" data-target="qna-section">Q&A</button>
    </div>

    <!-- 리뷰 영역 -->
    <div id="review-section" class="tab-content-section">
        <div th:replace="~{review/review :: reviewboard}"></div>
    </div>

    <!-- Qna 영역 -->
    <div id="qna-section" class="tab-content-section" style="display: none;">
        <div th:replace="~{qna/qna :: qnaboard}"></div>
    </div>
</div>

<script>
    // 탭 전환 스크립트
    document.querySelectorAll('.tab-button').forEach(btn => {
      btn.addEventListener('click', function () {
        document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
        this.classList.add('active');

        const target = this.getAttribute('data-target');
        document.querySelectorAll('.tab-content-section').forEach(section => {
          section.style.display = section.id === target ? 'block' : 'none';
        });
      });
    });
</script>




프로덕트 컨트롤러

// 상품상세
    @GetMapping("/products/{id}")
    public String viewProduct(@PathVariable Long id,
                              @RequestParam(defaultValue = "1") int page,
                              @RequestParam(defaultValue = "latest") String sort,
                              @RequestParam(name = "qnaPage", defaultValue = "1") int qnaPage,
                              Model model,
                              @AuthenticationPrincipal CustomUserDetails customUserDetails) {

        Users user = customUserDetails != null ? customUserDetails.getUser() : null;

        // ───────────── 상품 상세 정보 ─────────────
        ProductDetailDto dto = productService.getProductDetail(id, user);
        model.addAttribute("product", dto);
        model.addAttribute("loginUser", user);

        // ───────────── 리뷰 데이터 ─────────────
        int reviewPageNum = Math.max(page - 1, 0);
        if (!sort.equals("latest") && !sort.equals("rating")) {
            sort = "latest";
        }

        Page<ReviewPost> reviewPage = reviewPostService.getReviews(id, reviewPageNum, sort);
        Map<Integer, Long> ratingSummary = reviewPostService.getRatingDistribution(id);
        Double averageRating = reviewPostService.getAverageRating(id);
        boolean hasWritten = (user != null && user.getEmail() != null)
                && reviewPostService.hasWrittenReview(id, user.getEmail());

        model.addAttribute("reviewPage", reviewPage != null ? reviewPage : Page.empty());
        model.addAttribute("ratingSummary", ratingSummary != null ? ratingSummary : new HashMap<>());
        model.addAttribute("averageRating", averageRating != null ? averageRating : 0.0);
        model.addAttribute("hasWritten", hasWritten);
        model.addAttribute("sort", sort);

        // ───────────── QnA 데이터 ─────────────
        int qnaPageNum = Math.max(qnaPage - 1, 0);
        List<QnaPostDto> qnaList = qnaPostService.getQnaPostDtoList(id, qnaPageNum);
        long qnaTotal = qnaPostService.countByProduct(id);

        model.addAttribute("qnaList", qnaList != null ? qnaList : new ArrayList<>());
        model.addAttribute("qnaTotal", qnaTotal);
        model.addAttribute("qnaPage", qnaPage);

        return "product/detail";
    }


