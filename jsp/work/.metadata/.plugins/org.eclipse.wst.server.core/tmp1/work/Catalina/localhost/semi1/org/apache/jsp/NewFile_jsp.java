/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-05-08 11:52:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.util.ArrayList;
import dto.Cosmetics;

public final class NewFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("dto.Cosmetics");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

   Connection conn = null;
   Statement stmt = null;
   ResultSet rs = null;
   ArrayList<Cosmetics> cosmeticsList = new ArrayList<>();

   try {
      String url = "jdbc:mysql://localhost:3306/semi?serverTimezone=UTC";
      String user = "root";
      String password = "1234";
      
      // MySQL JDBC 드라이버 로드
      Class.forName("com.mysql.cj.jdbc.Driver");  // 최신 JDBC 드라이버
      conn = DriverManager.getConnection(url, user, password);
      
      // SQL 쿼리 실행
      String sql = "SELECT id, name, brand, price, main_ingredient, effect, category, image_file, likes FROM cosmetics";
      stmt = conn.createStatement();
      rs = stmt.executeQuery(sql);

      // 결과 처리
      while (rs.next()) {
          Cosmetics cosmetics = new Cosmetics();
          cosmetics.setId(rs.getInt("id"));
          cosmetics.setName(rs.getString("name"));
          cosmetics.setBrand(rs.getString("brand"));
          cosmetics.setPrice(rs.getInt("price"));
          cosmetics.setMain_ingredient(rs.getString("main_ingredient"));
          cosmetics.setEffect(rs.getString("effect"));
          cosmetics.setCategory(rs.getString("category"));
          cosmetics.setImage_file(rs.getString("image_file"));
          cosmetics.setLikes(rs.getInt("likes"));
          cosmeticsList.add(cosmetics);
      }
   } catch (SQLException | ClassNotFoundException ex) {
      out.println("데이터베이스 연결 실패 또는 SQL 오류<br>");
      out.println("SQLException: " + ex.getMessage());
   } finally {
      try {
          if (rs != null) rs.close();
          if (stmt != null) stmt.close();
          if (conn != null) conn.close();
      } catch (SQLException ex) {
          out.println("리소스 종료 오류: " + ex.getMessage());
      }
   }
   
   // 조회된 데이터를 출력
   if (cosmeticsList.isEmpty()) {
       out.println("조회된 화장품이 없습니다.");
   } else {

      out.write("\r\n");
      out.write("       <table border=\"1\">\r\n");
      out.write("           <thead>\r\n");
      out.write("               <tr>\r\n");
      out.write("                   <th>ID</th>\r\n");
      out.write("                   <th>Name</th>\r\n");
      out.write("                   <th>Brand</th>\r\n");
      out.write("                   <th>Price</th>\r\n");
      out.write("                   <th>Main Ingredient</th>\r\n");
      out.write("                   <th>Effect</th>\r\n");
      out.write("                   <th>Category</th>\r\n");
      out.write("                   <th>Image</th>\r\n");
      out.write("                   <th>Likes</th>\r\n");
      out.write("               </tr>\r\n");
      out.write("           </thead>\r\n");
      out.write("           <tbody>\r\n");
      out.write("               ");

                   for (Cosmetics cosmetics : cosmeticsList) {
               
      out.write("\r\n");
      out.write("                   <tr>\r\n");
      out.write("                       <td>");
      out.print( cosmetics.getId() );
      out.write("</td>\r\n");
      out.write("                       <td>");
      out.print( cosmetics.getName() );
      out.write("</td>\r\n");
      out.write("                       <td>");
      out.print( cosmetics.getBrand() );
      out.write("</td>\r\n");
      out.write("                       <td>");
      out.print( cosmetics.getPrice() );
      out.write("</td>\r\n");
      out.write("                       <td>");
      out.print( cosmetics.getMain_ingredient() );
      out.write("</td>\r\n");
      out.write("                       <td>");
      out.print( cosmetics.getEffect() );
      out.write("</td>\r\n");
      out.write("                       <td>");
      out.print( cosmetics.getCategory() );
      out.write("</td>\r\n");
      out.write("                       <td><img src=\"");
      out.print( cosmetics.getImage_file() );
      out.write("\" width=\"50\" /></td>\r\n");
      out.write("                       <td>");
      out.print( cosmetics.getLikes() );
      out.write("</td>\r\n");
      out.write("                   </tr>\r\n");
      out.write("               ");

                   }
               
      out.write("\r\n");
      out.write("           </tbody>\r\n");
      out.write("       </table>\r\n");
      out.write("   ");

   }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
