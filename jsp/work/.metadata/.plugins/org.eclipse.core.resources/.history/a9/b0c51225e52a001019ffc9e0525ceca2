package mvc.cotroller;

import java.io.IOException;
import java.util.ArrayList;


import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import mvc.model.BoardDAO;
import mvc.model.BoardDTO;

public class BoardContoller  extends HttpServlet{
		   private static final long serialVersionUID = 1L;
		   static final int LISTCOUNT = 5;  //한페이지당 게시글 수

		   public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		      doPost(request, response);
		   }

		   public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		      
		      String RequestURI = request.getRequestURI();
		      String contextPath = request.getContextPath();
		      String command = RequestURI.substring(contextPath.length());  //링크 주소 추출
		      
		      response.setContentType("text/html; charset=UTF-8");
		      request.setCharacterEncoding("UTF-8");
		      
		      if (command.equals("/BoardListAction.do")) {//등록된 글 목록 페이지 출력하기
		          requestBoardList(request);
		          RequestDispatcher rd = request.getRequestDispatcher("./board/list.jsp");
		          rd.forward(request, response);
		       } else if (command.equals("/BoardWriteForm.do")) { //글 등록 페이지 출력
		             requestLoginName(request);
		             RequestDispatcher rd = request.getRequestDispatcher("./board/writeForm.jsp");
		             rd.forward(request, response);            
		       } else if (command.equals("/BoardWriteAction.do")) {//새로운 글 등록
		             requestBoardWrite(request);
		             RequestDispatcher rd = request.getRequestDispatcher("/BoardListAction.do");
		             rd.forward(request, response);                  
		       } else if (command.equals("/BoardViewAction.do")) {//선택된 글 상자 페이지 가져오기
		             requestBoardView(request);
		             RequestDispatcher rd = request.getRequestDispatcher("/BoardView.do");
		             rd.forward(request, response);                  
		       } else if (command.equals("/BoardView.do")) {  //글 상세 페이지 출
		             RequestDispatcher rd = request.getRequestDispatcher("./board/view.jsp");
		             rd.forward(request, response);   
		       } else if (command.equals("/BoardUpdateAction.do")) { //선택된 글 수정하기
		             requestBoardUpdate(request);
		             RequestDispatcher rd = request.getRequestDispatcher("/BoardListAction.do");
		             rd.forward(request, response);
		       }else if (command.equals("/BoardDeleteAction.do")) { //선택된 글 삭제하기
		             requestBoardDelete(request);
		             RequestDispatcher rd = request.getRequestDispatcher("/BoardListAction.do");
		             rd.forward(request, response);            
		       } 
		   }
	
}
