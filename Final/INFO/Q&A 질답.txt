




�� 발표 후 Q&A 예상 질문 & 답변

�� 1. 게시판 (인테리어 커뮤니티) 관련 질문

Q1: "게시판의 주요 기능은 무엇인가요?"

A: 인테리어 커뮤니티 게시판은 다음과 같은 기능을 제공합니다:

✅ 주요 기능:
• 게시글 작성/수정/삭제 (로그인 사용자)
• 이미지 업로드 (다중 파일 지원)
• 댓글 작성/수정/삭제
• 좋아요 기능
• 조회수 카운팅
• 검색 기능 (제목, 작성자, 전체)
• 페이지네이션
• 공지사항 (관리자 전용)

✅ 권한 관리:
• 비로그인: 조회만 가능
• 로그인: 글쓰기, 댓글, 좋아요 가능
• 관리자: 공지사항 작성, 모든 글 삭제 가능


Q2: "게시판에서 이미지 업로드는 어떻게 처리하나요?"

A: 다중 파일 업로드를 지원하며 다음과 같이 처리합니다:

✅ 기술적 구현:
• MultipartFile[] 배열로 다중 파일 처리
• 파일명과 경로를 DB에 저장 (쉼표로 구분)
• 업로드 디렉토리: /uploads/
• 이미지가 없으면 기본 이미지 자동 설정
• 파일 확장자 검증 및 보안 처리

✅ 사용자 경험:
• 드래그 앤 드롭 지원
• 미리보기 기능
• 파일 크기 제한


Q3: "좋아요 기능은 어떻게 구현했나요?"

A: 별도의 PostLike 엔티티를 통해 구현했습니다:

✅ 구현 방식:
• PostLike 테이블로 사용자-게시글 관계 관리
• Toggle 방식 (좋아요 → 취소 → 좋아요)
• 실시간 카운트 업데이트
• 중복 좋아요 방지

✅ 기술적 특징:
• JPA @ManyToOne 관계 매핑
• 트랜잭션 처리로 데이터 일관성 보장
• 비동기 처리로 UI 반응성 향상

----------------------------------------------------------------

🎯 2. 리뷰 시스템 관련 질문

Q4: "리뷰 작성 권한은 어떻게 관리하나요?"

A: 구매한 사용자만 리뷰를 작성할 수 있도록 구현했습니다:

✅ 권한 체크:
• hasPurchasedProduct() 메서드로 구매 여부 확인
• Order 테이블에서 해당 상품 구매 내역 조회
• 구매하지 않은 사용자는 리뷰 작성 불가
• 중복 리뷰 작성 방지

✅ 사용자 경험:
• 구매하지 않은 경우 안내 메시지 표시
• 구매 후 리뷰 작성 버튼 활성화
• 리뷰 작성 완료 시 해당 리뷰로 스크롤


Q5: "리뷰의 평점 시스템은 어떻게 작동하나요?"

A: 5점 만점의 별점 시스템으로 구현했습니다:

✅ 평점 기능:
• 1~5점 별점 선택
• 평균 평점 자동 계산
• 별점 분포 통계 제공
• 평점별 필터링 기능

✅ 평점 계산:
• Product 엔티티의 averageRating 필드 사용
• 리뷰 등록/수정/삭제 시 자동 업데이트
• 소수점 2자리까지 정확도 보장


Q6: "리뷰 이미지 업로드는 어떻게 처리하나요?"

A: 다중 이미지 업로드를 지원하며 다음과 같이 처리합니다:

✅ 이미지 처리:
• MultipartFile[] 배열로 다중 파일 처리
• 파일명과 경로를 쉼표로 구분하여 저장
• 업로드 디렉토리: /uploads/
• 이미지 미리보기 기능

✅ 보안 및 최적화:
• 파일 크기 제한
• 허용된 이미지 형식 검증
• 파일명 중복 방지 (UUID 사용)


-------------------------------------------------------------------


�� 3. QnA 시스템 관련 질문

Q7: "QnA의 비밀글 기능은 어떻게 구현했나요?"

A: QnaPost 엔티티의 isSecret 필드로 구현했습니다:

✅ 비밀글 기능:
• isSecret boolean 필드로 비밀글 여부 관리
• 비밀글은 작성자와 관리자만 조회 가능
• 비밀글 목록에서는 제목만 표시
• 비밀글 답변도 동일한 권한 적용

✅ 권한 관리:
• 작성자 본인 확인
• 관리자 권한 체크
• 비밀글 목록에서 "비밀글" 표시

Q8: "QnA 답변은 누가 작성할 수 있나요?"

A: 관리자만 답변을 작성할 수 있도록 구현했습니다:

✅ 답변 권한:
• QnaAnswerService에서 관리자 권한 체크
• validateAdmin() 메서드로 Role.ADMIN 확인
• 일반 사용자는 답변 작성 불가
• 중복 답변 방지 (1:1 관계)

✅ 답변 관리:
• 답변 등록/수정/삭제 (관리자만)
• 답변 완료 시 Q&A 상태 업데이트
• 답변 필터링 (답변완료/미답변)

Q9: "QnA에서 구매 여부 표시는 어떻게 구현했나요?"

A: Order 테이블을 조회하여 구매 여부를 확인합니다:

✅ 구매 여부 확인:
• hasPurchasedProduct() 메서드로 구매 내역 조회
• OrderItem 테이블에서 해당 상품 구매 여부 확인
• 구매한 사용자는 "구매자" 표시
• 구매하지 않은 사용자는 표시 안함

✅ 사용자 경험:
• 구매자 표시로 신뢰도 향상
• 구매자 우선 답변 정책 적용 가능
• 구매자 필터링 기능 제공

--------------------------------------------------------


🎯 4. 챗봇 기능 관련 질문

Q10: "챗봇은 어떤 방식으로 구현했나요?"

A: 키워드 기반의 규칙 엔진 방식으로 구현했습니다:

✅ 구현 방식:
• 키워드 매칭 기반 응답 생성
• 9가지 주요 카테고리 분류
• 제안사항 버튼으로 사용자 편의성 향상
• JSON 형태의 응답 데이터 구조

✅ 주요 기능:
• 상품 검색 및 추천
• 카테고리 안내
• 배송/반품/결제 문의
• 이벤트 정보 제공
• FAQ 자동 응답

Q11: "챗봇의 키워드 인식은 어떻게 작동하나요?"

A: 메시지를 소문자로 변환 후 키워드 배열과 매칭합니다:

✅ 키워드 처리:
• containsXXXKeywords() 메서드로 키워드 분류
• Arrays.stream().anyMatch() 사용
• 우선순위 기반 처리 (뒤로가기 → FAQ → 카테고리 → 상품)
• 정확하지 않은 경우 기본 응답 제공

✅ 키워드 카테고리:
• 상품 관련: 소파, 테이블, 의자, 침대 등
• 카테고리: 가구, 조명, 인테리어소품 등
• 주문/배송: 배송, 택배, 언제 등
• 결제: 카드, 할부, 쿠폰 등


Q12: "챗봇에서 상품 검색은 어떻게 구현했나요?"

A: ProductRepository를 활용한 동적 검색으로 구현했습니다:

✅ 상품 검색:
• findByNameContainingIgnoreCase() 메서드 사용
• 카테고리별 상품 필터링
• 검색 결과에 카테고리 링크 제공
• 상품명 기반 유사도 검색

✅ 사용자 경험:
• 자연어로 상품 검색 가능
• "소파 추천해줘" → 소파 상품 목록 제공
• 카테고리 페이지로 직접 이동 링크
• 검색 결과가 없을 때 안내 메시지


------------------------------------------------------------------


🎯 5. 기술적 구현 관련 질문

Q13: "파일 업로드 보안은 어떻게 처리했나요?"

A: 여러 보안 조치를 적용했습니다:

✅ 보안 처리:
• 파일 확장자 검증 (이미지 파일만 허용)
• 파일 크기 제한 (10MB 이하)
• 파일명 중복 방지 (UUID 사용)
• 업로드 디렉토리 외부 접근 차단
• XSS 공격 방지를 위한 파일명 검증

✅ 에러 처리:
• 파일 업로드 실패 시 예외 처리
• 잘못된 파일 형식 시 사용자 안내
• 파일 크기 초과 시 경고 메시지


Q14: "페이지네이션은 어떻게 구현했나요?"

A: Spring Data JPA의 Pageable을 활용했습니다:

✅ 페이지네이션 구현:
• PageRequest.of()로 페이지 정보 생성
• Sort.by()로 정렬 조건 설정
• Page<T> 인터페이스 활용
• 페이지 번호, 크기, 정렬 방향 설정

✅ 사용자 경험:
• 페이지 번호 클릭으로 이동
• 이전/다음 페이지 버튼
• 전체 페이지 수 표시
• 현재 페이지 하이라이트

Q15: "검색 기능은 어떻게 구현했나요?"

A: JPA Query Methods와 @Query를 활용했습니다:

✅ 검색 구현:
• findByTitleContaining(): 제목 검색
• findByUserNicknameContaining(): 작성자 검색
• findByTitleContainingOrUserNicknameContaining(): 전체 검색
• 검색 타입별 분기 처리

✅ 검색 최적화:
• 대소문자 구분 없는 검색 (IgnoreCase)
• 공백 제거 후 검색
• 검색 결과 정렬 (최신순)
• 검색어 하이라이트 표시


-----------------------------------------------------------------


🎯 6. 추가 예상 질문

Q16: "실시간 기능은 구현했나요?"

A: 현재는 기본적인 기능만 구현되어 있습니다:

✅ 현재 구현:
• 좋아요 실시간 카운트 업데이트
• 조회수 실시간 증가
• 댓글 실시간 등록

✅ 향후 개선 방향:
• WebSocket을 활용한 실시간 채팅
• 실시간 알림 기능
• 실시간 댓글 업데이트


Q17: "성능 최적화는 어떻게 했나요?"

A: 여러 최적화 기법을 적용했습니다:

✅ 성능 최적화:
• JPA N+1 문제 해결 (Fetch Join 사용)
• 페이지네이션으로 대용량 데이터 처리
• 이미지 압축 및 리사이징
• 캐싱 적용 (Redis 도입 예정)
• 인덱스 최적화

✅ 모니터링:
• 로깅 시스템 구축
• 성능 메트릭 수집
• 에러 추적 및 알림

